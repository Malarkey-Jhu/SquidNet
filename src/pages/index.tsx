import Head from 'next/head';
import { useEffect, useState, useRef } from 'react';
import { Card, Carousel, Button } from '@douyinfe/semi-ui';
import Tiptap from '@/components/TipTap';
import Layout from '@/components/Layout';
import type { ReactElement } from 'react';
import { IconLikeHeart, IconComment } from '@douyinfe/semi-icons';
import InfiniteScroll from 'react-infinite-scroll-component';
import Image from 'next/image';

import { api } from '@/utils/api';
import { NextPageWithLayout } from './_app';
const { Meta } = Card;
import cx from 'classnames';
import { Post, PostImage } from '@prisma/client';
import Link from 'next/link';

const PostAction = ({ postId, liked }: { postId: string; liked: boolean }) => {
  const { mutateAsync } = api.post.like.useMutation();
  const [curLiked, setCurLiked] = useState(liked);
  const handleLike = () => {
    mutateAsync({ postId, like: !curLiked })
      .then((res) => {
        setCurLiked(!curLiked);
      })
      .catch((err) => console.log(err));
  };
  return (
    <div className='flex items-center justify-end gap-2'>
      <IconLikeHeart
        onClick={handleLike}
        className={cx('cursor-pointer  hover:text-red-400', {
          'text-red-400': curLiked,
          'text-slate-500/50': !curLiked,
        })}
      />
      <Link href={`/post/${encodeURIComponent(postId)}`}>
        <IconComment className='cursor-pointer text-slate-500/50 hover:text-sky-400' />
      </Link>
    </div>
  );
};

type PostItem = Post & {
  likes: {
    id: string;
  }[];
  _count: {
    likes: number;
  };
  images: PostImage[];
};

const PAGE_SIZE = 2;
const Home: NextPageWithLayout = () => {
  const preSkipRef = useRef(-1);
  const [hasMore, setHasMore] = useState(false);
  const [skip, setSkip] = useState(0);
  const posts = api.post.findMany.useQuery(
    { take: PAGE_SIZE, skip },
    { enabled: false, refetchOnWindowFocus: false },
  );
  const [curPosts, setCurPosts] = useState<PostItem[]>([]);

  const onPublish = () => {
    posts.refetch();
  };

  const handleNextPage = () => {
    setSkip((s) => s + PAGE_SIZE);
  };

  useEffect(() => {
    if (skip === preSkipRef.current) return;
    posts.refetch().then((res) => {
      if (res.data?.posts && res.data.curSkip !== preSkipRef.current) {
        setCurPosts((p) => [...p, ...res.data.posts]);
        preSkipRef.current = skip;
        setHasMore(res.data.hasMore);
      }
    });
  }, [skip]);

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name='description' content='Generated by create-t3-app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>
      <main className='flex min-h-screen flex-col items-center justify-center '>
        <div className='container flex flex-col items-center justify-center gap-12 px-4 py-16 '>
          <Tiptap onPublish={onPublish} />

          <div className='flex flex-col items-center gap-2'>
            <InfiniteScroll
              dataLength={curPosts.length}
              next={handleNextPage}
              hasMore={hasMore}
              loader={<h4>Loading...</h4>}
              endMessage={
                <p style={{ textAlign: 'center' }}>
                  <b>Yay! You have seen it all</b>
                </p>
              }
            >
              {curPosts.map((post) => {
                return (
                  <div key={post.id}>
                    <Card
                      style={{ width: 300 }}
                      footer={<PostAction postId={post.id} liked={post.likes.length > 0} />}
                      headerLine={false}
                      cover={
                        <Carousel
                          style={{
                            width: '300px',
                            height: '160px',
                            display: post.images.length === 0 ? 'none' : 'block',
                          }}
                          theme='dark'
                          autoPlay={false}
                          showArrow={false}
                        >
                          {post.images.map((image) => {
                            return <Image alt='postimages' key={image.id} src={image.url} fill />;
                          })}
                        </Carousel>
                      }
                    >
                      <Meta title={post.title} description={<p>{post.content}</p>} />
                    </Card>
                  </div>
                );
              })}
            </InfiniteScroll>
          </div>
        </div>
      </main>
    </>
  );
};

Home.getLayout = function getLayout(page: ReactElement) {
  return <Layout>{page}</Layout>;
};

export default Home;

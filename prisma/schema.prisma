// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url          = env("DATABASE_URL")
  relationMode = "foreignKeys"
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Post {
  id         String      @id @default(cuid())
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  published  Boolean     @default(false)
  title      String
  content    String?     @db.Text
  banner     String?
  author     User        @relation(fields: [authorId], references: [id])
  authorId   String
  comments   Comment[]
  likes      Like[]
  category   Category?   @relation(fields: [categoryId], references: [id])
  categoryId String?
  Favorite   Favorite[]
  images     PostImage[]
  isDeleted   Boolean     @default(false)

  @@index([authorId])
  @@index([categoryId])
}

model PostImage {
  id     String @id @default(cuid())
  url    String
  postId String
  order  Int    @db.UnsignedTinyInt()
  post   Post   @relation(fields: [postId], references: [id])
}

model Category {
  id    String @id @default(cuid())
  name  String
  posts Post[]
}

model Comment {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  published Boolean  @default(false)
  content   String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  likes     Like[]

  @@index([postId])
}

model Like {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  postId    String?
  post      Post?    @relation(fields: [postId], references: [id])
  commentId String?
  comment   Comment? @relation(fields: [commentId], references: [id])
  isDeleted Boolean  @default(false)

  @@unique([userId, postId])
  @@unique([userId, commentId])
}

model Favorite {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  postId    String

  // Relationships
  user User @relation(fields: [userId], references: [id])
  post Post @relation(fields: [postId], references: [id])

  // Indexes
  @@index([userId])
  @@index([postId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(cuid())
  email         String?    @unique
  password      String?
  name          String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime   @default(now())
  Post          Post[]
  Comment       Comment[]
  likes         Like[]
  Favorite      Favorite[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
